{"version":3,"sources":["firebase.js","actions/index.js","components/ListItem.js","components/MainMenu.js","components/Game.js","App.js","serviceWorker.js","reducers/index.js","reducers/data.js","actions/types.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","todosRef","ref","child","addTodo","newToDo","dispatch","a","push","set","completeToDo","remove","joinGame","gameId","fetchToDos","on","snapshot","type","payload","val","ListItem","completeClick","completeTodoId","props","joinGameClick","this","gameCode","game","key","className","title","onClick","Component","connect","MainMenu","state","showForm","formValue","username","sessionId","inputChange","e","setState","target","value","loginChange","formSubmit","preventDefault","loginFormSubmit","Math","round","random","renderLoginForm","onSubmit","onChange","id","htmlFor","renderForm","data","toDos","_","map","isEmpty","renderNewGame","actions","Game","code","name","loading","errors","handleSubmit","fetch","method","headers","mode","then","response","json","sesionId","history","catch","err","console","log","App","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.58771bb6.chunk.js","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBXBvxMBD9pJQQmnyml7vqAaN02Mb-cN-A\",\n    authDomain: \"erudite-me.firebaseapp.com\",\n    databaseURL: \"https://erudite-me.firebaseio.com\",\n    projectId: \"erudite-me\",\n    storageBucket: \"erudite-me.appspot.com\",\n    messagingSenderId: \"452722543024\",\n    appId: \"1:452722543024:web:3771b75e393a5eff596e75\",\n    measurementId: \"G-50XQV0RK8T\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst databaseRef = firebase.database().ref();\nexport const todosRef = databaseRef.child(\"quiz\");","import { todosRef } from '../firebase'\nconst FETCH_TODOS = 'FETCH_TODOS';\n\nexport const addTodo = newToDo => async dispatch => {\n    todosRef.push().set(newToDo);\n};\n\nexport const completeToDo = completeToDo => async dispatch => {\n    todosRef.child(completeToDo).remove();\n};\n\nexport const joinGame = (gameId) => async dispatch => {\n    // TODO: Initiate session\n    // Write to db that user joined the game\n    \n    todosRef.child(gameId).remove();\n};\n\nexport const fetchToDos = () => async dispatch => {\n    todosRef.on(\"value\", snapshot => {\n        dispatch({\n            type: FETCH_TODOS,\n            payload: snapshot.val()\n        });\n    });\n};","\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { completeToDo, joinGame } from '../actions';\n\nclass ListItem extends Component {\n\n    completeClick = completeTodoId => {\n        const { completeToDo } = this.props;\n        completeToDo(completeTodoId);\n    };\n\n    joinGameClick = (gameId) => {\n        const { joinGame } = this.props;\n        joinGame(gameId);\n    };\n\n    render() {\n        const { gameCode, game } = this.props;\n        return (\n            <div key=\"gameCode\" className=\"col s10 offset-s1 to-do-list-item black\">\n                <h4>\n                    {game.title}\n                    <span\n\n                        className=\"complete-todo-item waves-effect waves-light blue lighten-5 blue-text text-darken-4 btn\"\n                    >\n                        <button onClick={() => this.joinGameClick(gameCode)} className=\"large button material-icons\">Join Game</button>\n                        <button onClick={() => this.completeClick(gameCode)} className=\"large button material-icons delete-button\">Delete Game</button>\n                    </span>\n                </h4>\n            </div>\n        );\n    }\n}\n\nexport default connect(null, { completeToDo, joinGame })(ListItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport * as actions from '../actions';\nimport ListItem from './ListItem';\n\nclass MainMenu extends Component {\n  state = {\n    showForm: false,\n    formValue: \"\",\n    username: \"\",\n    sessionId: \"\",\n  };\n\n  inputChange = e => {\n    this.setState({ formValue: e.target.value });\n  };\n\n  loginChange = e => {\n    this.setState({ username: e.target.value });\n  };\n\n  formSubmit = e => {\n    const { formValue } = this.state;\n    const { addTodo } = this.props;\n    e.preventDefault();\n    addTodo({ title: formValue });\n    this.setState({ formValue: \"\" });\n  };\n\n  loginFormSubmit = e => {\n    // const { username } = this.session;\n    // const { addSession } = this.props;\n    e.preventDefault();\n    // addSession({ username: username });\n    this.setState({ sessionId: Math.round(Math.random() * 1000000) });\n  };\n\n  renderLoginForm = () => {\n    const { username, sessionId } = this.state;\n    if (!sessionId) {\n      return (\n        <div>\n          <form onSubmit={this.loginFormSubmit}>\n            <div>\n              <span>Your Username: </span>\n              <input\n                className=\"input\"\n                value={username}\n                onChange={this.loginChange}\n                id=\"username\"\n                type=\"text\"\n              />\n              <label htmlFor=\"username\"></label>\n              <button className=\"button\" type=\"submit\">Login</button>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  };\n\n  renderForm = () => {\n    const { showForm, formValue } = this.state;\n    if (showForm) {\n      return (\n        <div>\n          <form onSubmit={this.formSubmit}>\n            <div>\n              <span>New game ID: </span>\n              <input\n                className=\"input\"\n                value={formValue}\n                onChange={this.inputChange}\n                id=\"gameId\"\n                type=\"text\"\n              />\n              <label htmlFor=\"gameId\"></label>\n              <button className=\"button\" type=\"submit\">Create</button>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  };\n\n  renderNewGame() {\n    const { data } = this.props;\n    const toDos = _.map(data, (value, key) => {\n      return <ListItem key={key} gameCode={key} game={value} />;\n    });\n    if (!_.isEmpty(toDos)) {\n      return toDos;\n    }\n    return (\n      <div>\n        <h4>There are no current game rooms. Please create a new Game room</h4>\n      </div>\n    );\n  }\n  componentWillMount() {\n    this.props.fetchToDos();\n  }\n  render() {\n    const { showForm, username, sessionId } = this.state;\n    if (!(sessionId && username)) {\n      return (\n        <div>\n          {this.renderLoginForm()}\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <div>\n            {this.renderForm()}\n            {this.renderNewGame()}\n          </div>\n          <div>\n            <button className=\"button\" onClick={() => this.setState({ showForm: !showForm })}>\n              {showForm ? (\n                <i>Cancel</i>\n              ) : (\n                  <i>Create new Game</i>\n                )}\n            </button>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = ({ data }) => {\n  return {\n    data\n  }\n}\n\nexport default connect(mapStateToProps, actions)(MainMenu);","// Game.js\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Game extends Component {\n\n    state = {\n        gameId: \"\",\n        code: \"\",\n        name: \"\",\n        loading: false,\n        errors: []\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        // Join game API: https://us-central1-erudite-me.cloudfunctions.net/joinGame?code=5U6U8K&name=nameofplayer\n        const url = `https://us-central1-erudite-me.cloudfunctions.net/joinGame?code=5U6U8K&name=nameofplayer`;\n\n        const options = {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            // credentials: 'include',\n            mode: \"no-cors\"\n        };\n\n        fetch(url, options)\n            .then(response => response.json())\n            .then(data => {\n\n                this.setState({\n                    loading: false,\n                    gameId: data.gameId,\n                    sessionId: data.sesionId\n                });\n                this.props.history.push('/');\n            }\n            ).catch(err => {\n                console.log(err);\n                this.setState({\n                    errors: err,\n                    loading: false\n                });\n            });\n    };\n\n\n    // handleSubmit = (e) => {\n    //     e.preventDefault();\n    //     this.setState({ loading: true });\n    //     const data = {\n    //         code: this.state.code,\n    //         name: this.state.name,\n    //     };\n    //     axios\n    //         .post('/joinGame', data)\n    //         .then((response) => {\n    //             localStorage.setItem('AuthToken', `Bearer ${response.data.token}`);\n    //             this.setState({\n    //                 loading: false,\n    //                 gameId: response.data.gameId,\n    //                 sessionId: response.data.sesionId\n    //             });\n    //             this.props.history.push('/');\n    //         })\n    //         .catch((error) => {\n    //             this.setState({\n    //                 errors: error.response.data,\n    //                 loading: false\n    //             });\n    //         });\n    // };\n\n    render() {\n        const { gameId, code } = this.props;\n        const { errors, loading } = this.state;\n        return (\n            <div>\n                <div>Game ID: {gameId}</div>\n                <div>Game Code: {code}</div>\n                <button onClick={this.handleSubmit}></button>\n            </div>\n        );\n    }\n}\n\nexport default connect()(Game);","import React from 'react';\nimport './App.css';\nimport MainMenu from './components/MainMenu';\nimport Game from './components/Game';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <MainMenu/>\n        <Game></Game>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport data from './data';\nexport default combineReducers({\n  data\n});","import {FETCH_TODOS} from '../actions/types';\nexport default (state = {}, action) => {\n  switch(action.type) {\n    case FETCH_TODOS:\n      return action.payload;\n    default:\n      return state;\n  }\n};","export const FETCH_TODOS = \"FETCH_TODOS\"","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}